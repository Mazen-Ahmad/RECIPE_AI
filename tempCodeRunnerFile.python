import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import FunctionTransformer

df = pd.read_csv("D:\Final_Indian_Food_Unmodified_Ingredients.csv")

# Define features and target
X = df.drop(columns=["difficulty"])
y = df["difficulty"]

# Preprocessing pipeline
preprocessor = ColumnTransformer(
    transformers=[
        ("tfidf", TfidfVectorizer(), "main_ingredients"),
        ("num", FunctionTransformer(lambda x: x / 2.0), ["estimated_cooking_time_minutes", "ingredient_count", "complexity_score"])
    ]
)

# Full pipeline
pipeline = Pipeline([
    ("features", preprocessor),
    ("clf", RandomForestClassifier(random_state=42))
])

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
pipeline.fit(X_train, y_train)

# Test with a sample recipe
test_json ={
  "main_ingredients": [
    "chicken",
    "butter",
    "cream",
    "tomato",
    "onion",
    "ginger",
    "garlic",
    "garam masala",
    "fenugreek leaves"
  ],
  "estimated_cooking_time_minutes": 50,
  "ingredient_count": 9,
  "complexity_score": 1
}


test_df = pd.DataFrame([{
    "main_ingredients": ", ".join(test_json["main_ingredients"]),
    "estimated_cooking_time_minutes": test_json["estimated_cooking_time_minutes"],
    "ingredient_count": test_json["ingredient_count"],
    "complexity_score": test_json["complexity_score"]
}])

predicted_difficulty = pipeline.predict(test_df)[0]
print(f"Predicted difficulty for the test recipe: {predicted_difficulty}")
